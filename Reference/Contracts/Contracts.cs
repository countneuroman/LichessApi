//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.1.0 (NJsonSchema v10.3.3.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace LichessNet.Contracts
{
    using System = global::System;
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Clock 
    {
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("increment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Increment { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ChallengeJson 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GameJson 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class GamePgn 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StudyPgn 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Title
    {
        [System.Runtime.Serialization.EnumMember(Value = @"GM")]
        GM = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WGM")]
        WGM = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IM")]
        IM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WIM")]
        WIM = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FM")]
        FM = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WFM")]
        WFM = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NM")]
        NM = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WCM")]
        WCM = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WNM")]
        WNM = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LM")]
        LM = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BOT")]
        BOT = 11,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LightUser 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Title Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("patron", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Patron { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Perf 
    {
        [Newtonsoft.Json.JsonProperty("games", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Games { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rating { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("prog", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Prog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("prov", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Prov { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Perfs 
    {
        [Newtonsoft.Json.JsonProperty("chess960", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perf Chess960 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("atomic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perf Atomic { get; set; }
    
        [Newtonsoft.Json.JsonProperty("racingKings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perf RacingKings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ultraBullet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perf UltraBullet { get; set; }
    
        [Newtonsoft.Json.JsonProperty("blitz", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perf Blitz { get; set; }
    
        [Newtonsoft.Json.JsonProperty("kingOfTheHill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perf KingOfTheHill { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bullet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perf Bullet { get; set; }
    
        [Newtonsoft.Json.JsonProperty("correspondence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perf Correspondence { get; set; }
    
        [Newtonsoft.Json.JsonProperty("horde", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perf Horde { get; set; }
    
        [Newtonsoft.Json.JsonProperty("puzzle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perf Puzzle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("classical", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perf Classical { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rapid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perf Rapid { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PlayTime 
    {
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tv", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Tv { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Profile 
    {
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fideRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FideRating { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uscfRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int UscfRating { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ecfRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EcfRating { get; set; }
    
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Links { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Count 
    {
        [Newtonsoft.Json.JsonProperty("all", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int All { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ai", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Ai { get; set; }
    
        [Newtonsoft.Json.JsonProperty("draw", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Draw { get; set; }
    
        [Newtonsoft.Json.JsonProperty("drawH", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DrawH { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loss", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Loss { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lossH", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LossH { get; set; }
    
        [Newtonsoft.Json.JsonProperty("win", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Win { get; set; }
    
        [Newtonsoft.Json.JsonProperty("winH", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WinH { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bookmark", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Bookmark { get; set; }
    
        [Newtonsoft.Json.JsonProperty("playing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Playing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("import", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Import { get; set; }
    
        [Newtonsoft.Json.JsonProperty("me", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Me { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class User 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }
    
        [Newtonsoft.Json.JsonProperty("online", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Online { get; set; }
    
        [Newtonsoft.Json.JsonProperty("perfs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perfs Perfs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CreatedAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Disabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tosViolation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool TosViolation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("booster", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Booster { get; set; }
    
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Profile Profile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("seenAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SeenAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("patron", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Patron { get; set; }
    
        [Newtonsoft.Json.JsonProperty("playTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlayTime PlayTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Title Title { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UserExtended : User
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("playing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Playing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nbFollowing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NbFollowing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nbFollowers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NbFollowers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("completionRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompletionRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Count Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("streaming", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Streaming { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Followable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("following", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Following { get; set; }
    
        [Newtonsoft.Json.JsonProperty("blocking", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Blocking { get; set; }
    
        [Newtonsoft.Json.JsonProperty("followsYou", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FollowsYou { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Crosstable 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PuzzleRoundJson 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PuzzleDashboardJson 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RatingHistory 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Top10s 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Leaderboard 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UserPreferences 
    {
        [Newtonsoft.Json.JsonProperty("dark", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Dark { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Transp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bgImg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri BgImg { get; set; }
    
        [Newtonsoft.Json.JsonProperty("is3d", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is3d { get; set; }
    
        [Newtonsoft.Json.JsonProperty("theme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserPreferencesTheme Theme { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pieceSet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserPreferencesPieceSet PieceSet { get; set; }
    
        [Newtonsoft.Json.JsonProperty("theme3d", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserPreferencesTheme3d Theme3d { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pieceSet3d", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserPreferencesPieceSet3d PieceSet3d { get; set; }
    
        [Newtonsoft.Json.JsonProperty("soundSet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserPreferencesSoundSet SoundSet { get; set; }
    
        [Newtonsoft.Json.JsonProperty("blindfold", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Blindfold { get; set; }
    
        [Newtonsoft.Json.JsonProperty("autoQueen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AutoQueen { get; set; }
    
        [Newtonsoft.Json.JsonProperty("autoThreefold", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AutoThreefold { get; set; }
    
        [Newtonsoft.Json.JsonProperty("takeback", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Takeback { get; set; }
    
        [Newtonsoft.Json.JsonProperty("moretime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Moretime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("clockTenths", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ClockTenths { get; set; }
    
        [Newtonsoft.Json.JsonProperty("clockBar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ClockBar { get; set; }
    
        [Newtonsoft.Json.JsonProperty("clockSound", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ClockSound { get; set; }
    
        [Newtonsoft.Json.JsonProperty("premove", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Premove { get; set; }
    
        [Newtonsoft.Json.JsonProperty("animation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Animation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("captured", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Captured { get; set; }
    
        [Newtonsoft.Json.JsonProperty("follow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Follow { get; set; }
    
        [Newtonsoft.Json.JsonProperty("highlight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Highlight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Destination { get; set; }
    
        [Newtonsoft.Json.JsonProperty("coords", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Coords { get; set; }
    
        [Newtonsoft.Json.JsonProperty("replay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Replay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("challenge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Challenge { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("coordColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object CoordColor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("submitMove", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object SubmitMove { get; set; }
    
        [Newtonsoft.Json.JsonProperty("confirmResign", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ConfirmResign { get; set; }
    
        [Newtonsoft.Json.JsonProperty("insightShare", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object InsightShare { get; set; }
    
        [Newtonsoft.Json.JsonProperty("keyboardMove", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object KeyboardMove { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Zen { get; set; }
    
        [Newtonsoft.Json.JsonProperty("moveEvent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object MoveEvent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rookCastle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object RookCastle { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ArenaTournament 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ArenaTournamentSystem System { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minutes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Minutes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("clock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Clock Clock { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Rated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nbPlayers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NbPlayers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("variant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Variant Variant { get; set; }
    
        [Newtonsoft.Json.JsonProperty("startsAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartsAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("finishesAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FinishesAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("perf", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Perf2 Perf { get; set; }
    
        [Newtonsoft.Json.JsonProperty("secondsToStart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SecondsToStart { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasMaxRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasMaxRating { get; set; }
    
        [Newtonsoft.Json.JsonProperty("private", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Private { get; set; }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Position Position { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Schedule Schedule { get; set; }
    
        [Newtonsoft.Json.JsonProperty("winner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LightUser Winner { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ArenaTournaments 
    {
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ArenaTournament> Created { get; set; }
    
        [Newtonsoft.Json.JsonProperty("started", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ArenaTournament> Started { get; set; }
    
        [Newtonsoft.Json.JsonProperty("finished", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ArenaTournament> Finished { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ArenaTournamentId 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SwissTournament 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Simul 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Broadcast 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Team 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("open", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Open { get; set; }
    
        [Newtonsoft.Json.JsonProperty("leader", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LightUser Leader { get; set; }
    
        [Newtonsoft.Json.JsonProperty("leaders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LightUser> Leaders { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nbMembers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NbMembers { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class BotGameState 
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public State State { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StreamEvents 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Ok 
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Ok1 { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Error 
    {
        /// <summary>The cause of the error.</summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error1 { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NotFound 
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PerfType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ultraBullet")]
        UltraBullet = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bullet")]
        Bullet = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"blitz")]
        Blitz = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rapid")]
        Rapid = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"classical")]
        Classical = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"chess960")]
        Chess960 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"crazyhouse")]
        Crazyhouse = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"antichess")]
        Antichess = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"atomic")]
        Atomic = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"horde")]
        Horde = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kingOfTheHill")]
        KingOfTheHill = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"racingKings")]
        RacingKings = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"threeCheck")]
        ThreeCheck = 12,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PerfType2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ultraBullet")]
        UltraBullet = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bullet")]
        Bullet = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"blitz")]
        Blitz = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rapid")]
        Rapid = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"classical")]
        Classical = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"correspondence")]
        Correspondence = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"chess960")]
        Chess960 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"crazyhouse")]
        Crazyhouse = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"antichess")]
        Antichess = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"atomic")]
        Atomic = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"horde")]
        Horde = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kingOfTheHill")]
        KingOfTheHill = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"racingKings")]
        RacingKings = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"threeCheck")]
        ThreeCheck = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Color
    {
        [System.Runtime.Serialization.EnumMember(Value = @"white")]
        White = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"black")]
        Black = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Body 
    {
        /// <summary>The PGN. It can contain only one game. Most standard tags are supported.</summary>
        [Newtonsoft.Json.JsonProperty("pgn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pgn { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Body2 
    {
        /// <summary>The tournament name. Leave empty to get a random Grandmaster name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Clock initial time in minutes</summary>
        [Newtonsoft.Json.JsonProperty("clockTime", Required = Newtonsoft.Json.Required.Always)]
        public double ClockTime { get; set; }
    
        /// <summary>Clock increment in seconds</summary>
        [Newtonsoft.Json.JsonProperty("clockIncrement", Required = Newtonsoft.Json.Required.Always)]
        public int ClockIncrement { get; set; }
    
        /// <summary>How long the tournament lasts, in minutes</summary>
        [Newtonsoft.Json.JsonProperty("minutes", Required = Newtonsoft.Json.Required.Always)]
        public int Minutes { get; set; }
    
        /// <summary>How long to wait before starting the tournament, from now, in minutes</summary>
        [Newtonsoft.Json.JsonProperty("waitMinutes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WaitMinutes { get; set; } = 5;
    
        /// <summary>Timestamp to start the tournament at a given date and time. Overrides the `waitMinutes` setting</summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartDate { get; set; }
    
        /// <summary>The variant to use in tournament games</summary>
        [Newtonsoft.Json.JsonProperty("variant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body2Variant Variant { get; set; } = LichessNet.Contracts.Body2Variant.Standard;
    
        /// <summary>Games are rated and impact players ratings</summary>
        [Newtonsoft.Json.JsonProperty("rated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Rated { get; set; } = true;
    
        /// <summary>Custom initial position (in FEN) for all games of the tournament. Must be a legal chess position. Only works with standard chess, not variants (except Chess960).</summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }
    
        /// <summary>Whether the players can use berserk</summary>
        [Newtonsoft.Json.JsonProperty("berserkable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Berserkable { get; set; } = true;
    
        /// <summary>After 2 wins, consecutive wins grant 4 points instead of 2.</summary>
        [Newtonsoft.Json.JsonProperty("streakable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Streakable { get; set; } = true;
    
        /// <summary>Whether the players can discuss in a chat</summary>
        [Newtonsoft.Json.JsonProperty("hasChat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasChat { get; set; } = true;
    
        /// <summary>Anything you want to tell players about the tournament</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Make the tournament private, and restrict access with a password</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }
    
        /// <summary>Restrict entry to members of a team.
        /// 
        /// The teamId is the last part of a team URL, e.g. https://lichess.org/team/coders has teamId = `coders`.
        /// 
        /// Leave empty to let everyone join the tournament.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions.teamMember.teamId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConditionsTeamMemberTeamId { get; set; }
    
        /// <summary>Minimum rating to join. Leave empty to let everyone join the tournament.</summary>
        [Newtonsoft.Json.JsonProperty("conditions.minRating.rating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ConditionsMinRatingRating { get; set; }
    
        /// <summary>Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.</summary>
        [Newtonsoft.Json.JsonProperty("conditions.maxRating.rating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ConditionsMaxRatingRating { get; set; }
    
        /// <summary>Minimum number of rated games required to join.</summary>
        [Newtonsoft.Json.JsonProperty("conditions.nbRatedGame.nb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ConditionsNbRatedGameNb { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Body3 
    {
        /// <summary>The tournament name. Leave empty to get a random Grandmaster name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Clock initial time in seconds</summary>
        [Newtonsoft.Json.JsonProperty("clock.limit", Required = Newtonsoft.Json.Required.Always)]
        public double ClockLimit { get; set; }
    
        /// <summary>Clock increment in seconds</summary>
        [Newtonsoft.Json.JsonProperty("clock.increment", Required = Newtonsoft.Json.Required.Always)]
        public int ClockIncrement { get; set; }
    
        /// <summary>Maximum number of rounds to play</summary>
        [Newtonsoft.Json.JsonProperty("nbRounds", Required = Newtonsoft.Json.Required.Always)]
        public int NbRounds { get; set; } = 8;
    
        /// <summary>Timestamp in milliseconds to start the tournament at a given date and time. By default, it starts 10 minutes after creation.</summary>
        [Newtonsoft.Json.JsonProperty("startsAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartsAt { get; set; }
    
        /// <summary>How long to wait between each round, in seconds.
        /// 
        /// Set to 99999999 to manually schedule each round from the tournament UI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roundInterval", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RoundInterval { get; set; }
    
        /// <summary>The variant to use in tournament games</summary>
        [Newtonsoft.Json.JsonProperty("variant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body3Variant Variant { get; set; } = LichessNet.Contracts.Body3Variant.Standard;
    
        /// <summary>Anything you want to tell players about the tournament</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Games are rated and impact players ratings</summary>
        [Newtonsoft.Json.JsonProperty("rated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Rated { get; set; } = true;
    
        /// <summary>Who can read and write in the chat.
        /// - 0  = No-one
        /// - 10 = Only team leaders
        /// - 20 = Only team members
        /// - 30 = All Lichess players
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chatFor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ChatFor { get; set; } = 20D;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Body4 
    {
        /// <summary>Name of the broadcast. Length must be between 3 and 80 characters.
        /// 
        /// Example: `Sinquefield Cup - Round 10`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }
    
        /// <summary>Short description of the broadcast. Length must be between 3 and 400 characters.
        /// 
        /// Example: `An 11 round classical tournament featuring the 9 highest rated players in the world. Including Carlsen, Caruana, Ding, Aronian, Nakamura and more.`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description { get; set; }
    
        /// <summary>URL that Lichess will poll to get updates about the games. It must be publicly accessible from the Internet.
        /// 
        /// Example: `http://myserver.org/myevent/round-10/games.pgn`
        /// 
        /// If the syncUrl is missing, then the broadcast needs to be fed by [pushing PGN to it](#operation/broadcastPush).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("syncUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SyncUrl { get; set; }
    
        /// <summary>Optional long description of the broadcast. Markdown is supported. Length must be less than 20,000 characters.</summary>
        [Newtonsoft.Json.JsonProperty("markdown", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Markdown { get; set; }
    
        /// <summary>Optional short text to give credit to the source provider.</summary>
        [Newtonsoft.Json.JsonProperty("credit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Credit { get; set; }
    
        /// <summary>Timestamp in milliseconds of broadcast start. Leave empty to manually start the broadcast.
        /// 
        /// Example: `1356998400070`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startsAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartsAt { get; set; }
    
        /// <summary>For Lichess internal usage only. You are not allowed to use this flag. If you do it, we will have to call the police.</summary>
        [Newtonsoft.Json.JsonProperty("official", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Official { get; set; }
    
        /// <summary>For Lichess internal usage only. You are not allowed to use this flag. If you do it, chess24 will [display ads on your broadcast](https://i.imgur.com/B47wT5P.jpg).</summary>
        [Newtonsoft.Json.JsonProperty("throttle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Throttle { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Body5 
    {
        /// <summary>Name of the broadcast. Length must be between 3 and 80 characters.
        /// 
        /// Example: `Sinquefield Cup - Round 10`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }
    
        /// <summary>Short description of the broadcast. Length must be between 3 and 400 characters.
        /// 
        /// Example: `An 11 round classical tournament featuring the 9 highest rated players in the world. Including Carlsen, Caruana, Ding, Aronian, Nakamura and more.`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        public string Description { get; set; }
    
        /// <summary>URL that Lichess will poll to get updates about the games. It must be publicly accessible from the Internet.
        /// 
        /// Example: `http://myserver.org/myevent/round-10/games.pgn`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("syncUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SyncUrl { get; set; }
    
        /// <summary>Optional long description of the broadcast. Markdown is supported. Length must be less than 20,000 characters.</summary>
        [Newtonsoft.Json.JsonProperty("markdown", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Markdown { get; set; }
    
        /// <summary>Optional short text to give credit to the source provider.</summary>
        [Newtonsoft.Json.JsonProperty("credit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Credit { get; set; }
    
        /// <summary>Timestamp in milliseconds of broadcast start. Leave empty to manually start the broadcast.
        /// 
        /// Example: `1356998400070`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startsAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartsAt { get; set; }
    
        /// <summary>For Lichess internal usage only. You are not allowed to use this flag. If you do it, we will have to call the police.</summary>
        [Newtonsoft.Json.JsonProperty("official", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Official { get; set; }
    
        /// <summary>For Lichess internal usage only. You are not allowed to use this flag. If you do it, chess24 will display ads on your broadcast.</summary>
        [Newtonsoft.Json.JsonProperty("throttle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Throttle { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Body6 
    {
        /// <summary>Optional request message, if the team requires one.</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        /// <summary>Optional password, if the team requires one.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Body7 
    {
        /// <summary>The message to send to all your team members.</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Body8 
    {
        /// <summary>Whether the game is rated and impacts players ratings.</summary>
        [Newtonsoft.Json.JsonProperty("rated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Rated { get; set; } = false;
    
        /// <summary>Clock initial time in minutes.</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        public double Time { get; set; }
    
        /// <summary>Clock increment in seconds.</summary>
        [Newtonsoft.Json.JsonProperty("increment", Required = Newtonsoft.Json.Required.Always)]
        public int Increment { get; set; }
    
        /// <summary>The variant of the game.</summary>
        [Newtonsoft.Json.JsonProperty("variant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body8Variant Variant { get; set; } = LichessNet.Contracts.Body8Variant.Standard;
    
        /// <summary>The color to play. Better left empty to automatically get 50% white.</summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body8Color Color { get; set; } = LichessNet.Contracts.Body8Color.Random;
    
        /// <summary>The rating range of potential opponents. Better left empty.
        /// Example: 1500-1800
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ratingRange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RatingRange { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Body9 
    {
        [Newtonsoft.Json.JsonProperty("room", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body9Room Room { get; set; }
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        public string Text { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Body10 
    {
        [Newtonsoft.Json.JsonProperty("room", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body10Room Room { get; set; }
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        public string Text { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Body11 
    {
        /// <summary>Game is rated and impacts players ratings</summary>
        [Newtonsoft.Json.JsonProperty("rated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Rated { get; set; }
    
        /// <summary>Clock initial time in seconds. If empty, a correspondence game is created.</summary>
        [Newtonsoft.Json.JsonProperty("clock.limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ClockLimit { get; set; }
    
        /// <summary>Clock increment in seconds. If empty, a correspondence game is created.</summary>
        [Newtonsoft.Json.JsonProperty("clock.increment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ClockIncrement { get; set; }
    
        /// <summary>Days per move, for correspondence games. Clock settings must be omitted.</summary>
        [Newtonsoft.Json.JsonProperty("days", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Days { get; set; }
    
        /// <summary>Which color you get to play</summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body11Color Color { get; set; } = LichessNet.Contracts.Body11Color.Random;
    
        /// <summary>The variant of the game</summary>
        [Newtonsoft.Json.JsonProperty("variant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body11Variant Variant { get; set; } = LichessNet.Contracts.Body11Variant.Standard;
    
        /// <summary>Custom initial position (in FEN). Variant must be standard, and the game cannot be rated. Castling moves will use UCI_Chess960 notation, for example e1h1 instead of e1g1.</summary>
        [Newtonsoft.Json.JsonProperty("fen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fen { get; set; } = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    
        /// <summary>Immediately accept the challenge and create the game.
        /// Pass in an OAuth token (with the `challenge:write` scope) for the receiving user.
        /// On success, the response will contain a `game` field instead of a `challenge` field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("acceptByToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcceptByToken { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Body12 
    {
        /// <summary>Reason challenge was declined. It will be translated to the player's language. See [the full list in the translation file](https://github.com/ornicar/lila/blob/43fbd61029ff3960a21fbd213944bed66325696d/translation/source/challenge.xml#L14).</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body12Reason Reason { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Body13 
    {
        /// <summary>AI strength</summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Level { get; set; }
    
        /// <summary>Clock initial time in seconds. If empty, a correspondence game is created.</summary>
        [Newtonsoft.Json.JsonProperty("clock.limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ClockLimit { get; set; }
    
        /// <summary>Clock increment in seconds. If empty, a correspondence game is created.</summary>
        [Newtonsoft.Json.JsonProperty("clock.increment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ClockIncrement { get; set; }
    
        /// <summary>Days per move, for correspondence games. Clock settings must be omitted.</summary>
        [Newtonsoft.Json.JsonProperty("days", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Days { get; set; }
    
        /// <summary>Which color you get to play</summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body13Color Color { get; set; } = LichessNet.Contracts.Body13Color.Random;
    
        /// <summary>The variant of the game</summary>
        [Newtonsoft.Json.JsonProperty("variant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body13Variant Variant { get; set; } = LichessNet.Contracts.Body13Variant.Standard;
    
        /// <summary>Custom initial position (in FEN). Variant must be standard, and the game cannot be rated.</summary>
        [Newtonsoft.Json.JsonProperty("fen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fen { get; set; } = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Body14 
    {
        /// <summary>Clock initial time in seconds. If empty, a correspondence game is created.</summary>
        [Newtonsoft.Json.JsonProperty("clock.limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ClockLimit { get; set; }
    
        /// <summary>Clock increment in seconds. If empty, a correspondence game is created.</summary>
        [Newtonsoft.Json.JsonProperty("clock.increment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ClockIncrement { get; set; }
    
        /// <summary>The variant of the game</summary>
        [Newtonsoft.Json.JsonProperty("variant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body14Variant Variant { get; set; } = LichessNet.Contracts.Body14Variant.Standard;
    
        /// <summary>Custom initial position (in FEN). Variant must be standard, and the game cannot be rated.</summary>
        [Newtonsoft.Json.JsonProperty("fen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fen { get; set; } = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Body15 
    {
        /// <summary>Game is rated and impacts players ratings</summary>
        [Newtonsoft.Json.JsonProperty("rated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Rated { get; set; }
    
        /// <summary>Clock initial time in seconds. If empty, a correspondence game is created.</summary>
        [Newtonsoft.Json.JsonProperty("clock.limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ClockLimit { get; set; }
    
        /// <summary>Clock increment in seconds. If empty, a correspondence game is created.</summary>
        [Newtonsoft.Json.JsonProperty("clock.increment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ClockIncrement { get; set; }
    
        /// <summary>Days per move, for correspondence games. Clock settings must be omitted.</summary>
        [Newtonsoft.Json.JsonProperty("days", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Days { get; set; }
    
        /// <summary>Which color you get to play</summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body15Color Color { get; set; } = LichessNet.Contracts.Body15Color.Random;
    
        /// <summary>The variant of the game</summary>
        [Newtonsoft.Json.JsonProperty("variant", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body15Variant Variant { get; set; } = LichessNet.Contracts.Body15Variant.Standard;
    
        /// <summary>Custom initial position (in FEN). Variant must be standard, and the game cannot be rated.</summary>
        [Newtonsoft.Json.JsonProperty("fen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fen { get; set; } = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Body16 
    {
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        public string Text { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("online", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Online { get; set; }
    
        [Newtonsoft.Json.JsonProperty("playing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Playing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("streaming", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Streaming { get; set; }
    
        [Newtonsoft.Json.JsonProperty("patron", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Patron { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous2 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("online", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Online { get; set; }
    
        [Newtonsoft.Json.JsonProperty("patron", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Patron { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response 
    {
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response2 
    {
        [Newtonsoft.Json.JsonProperty("prefs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserPreferences Prefs { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response3 
    {
        [Newtonsoft.Json.JsonProperty("kid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Kid { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum UserPreferencesTheme
    {
        [System.Runtime.Serialization.EnumMember(Value = @"blue")]
        Blue = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"blue2")]
        Blue2 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"blue3")]
        Blue3 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"blue-marble")]
        BlueMarble = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"canvas")]
        Canvas = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"wood")]
        Wood = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"wood2")]
        Wood2 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"wood3")]
        Wood3 = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"wood4")]
        Wood4 = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"maple")]
        Maple = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"maple2")]
        Maple2 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"brown")]
        Brown = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"leather")]
        Leather = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"green")]
        Green = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"marble")]
        Marble = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"green-plastic")]
        GreenPlastic = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"grey")]
        Grey = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"metal")]
        Metal = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"olive")]
        Olive = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"newspaper")]
        Newspaper = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"purple")]
        Purple = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"purple-diag")]
        PurpleDiag = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pink")]
        Pink = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ic")]
        Ic = 23,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum UserPreferencesPieceSet
    {
        [System.Runtime.Serialization.EnumMember(Value = @"cburnett")]
        Cburnett = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"merida")]
        Merida = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"alpha")]
        Alpha = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pirouetti")]
        Pirouetti = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"chessnut")]
        Chessnut = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"chess7")]
        Chess7 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"reillycraig")]
        Reillycraig = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"companion")]
        Companion = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"riohacha")]
        Riohacha = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kosal")]
        Kosal = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"leipzig")]
        Leipzig = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fantasy")]
        Fantasy = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"spatial")]
        Spatial = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"california")]
        California = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pixel")]
        Pixel = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"maestro")]
        Maestro = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fresca")]
        Fresca = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cardinal")]
        Cardinal = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gioco")]
        Gioco = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tatiana")]
        Tatiana = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"staunty")]
        Staunty = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"governor")]
        Governor = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"dubrovny")]
        Dubrovny = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"icpieces")]
        Icpieces = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"shapes")]
        Shapes = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"letter")]
        Letter = 25,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum UserPreferencesTheme3d
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Black-White-Aluminium")]
        BlackWhiteAluminium = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Brushed-Aluminium")]
        BrushedAluminium = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"China-Blue")]
        ChinaBlue = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"China-Green")]
        ChinaGreen = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"China-Grey")]
        ChinaGrey = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"China-Scarlet")]
        ChinaScarlet = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Classic-Blue")]
        ClassicBlue = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gold-Silver")]
        GoldSilver = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Light-Wood")]
        LightWood = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Power-Coated")]
        PowerCoated = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rosewood")]
        Rosewood = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Marble")]
        Marble = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wax")]
        Wax = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Jade")]
        Jade = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Woodi")]
        Woodi = 14,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum UserPreferencesPieceSet3d
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Basic")]
        Basic = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wood")]
        Wood = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Metal")]
        Metal = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RedVBlue")]
        RedVBlue = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ModernJade")]
        ModernJade = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ModernWood")]
        ModernWood = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Glass")]
        Glass = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Trimmed")]
        Trimmed = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Experimental")]
        Experimental = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Staunton")]
        Staunton = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CubesAndPi")]
        CubesAndPi = 10,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum UserPreferencesSoundSet
    {
        [System.Runtime.Serialization.EnumMember(Value = @"silent")]
        Silent = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"standard")]
        Standard = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"piano")]
        Piano = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nes")]
        Nes = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sfx")]
        Sfx = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"futuristic")]
        Futuristic = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"robot")]
        Robot = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"music")]
        Music = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"speech")]
        Speech = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ArenaTournamentSystem
    {
        [System.Runtime.Serialization.EnumMember(Value = @"arena")]
        Arena = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Variant 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("short", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Short { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Perf2 
    {
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Position 
    {
        [Newtonsoft.Json.JsonProperty("eco", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Eco { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("wikiPath", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WikiPath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fen { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Schedule 
    {
        [Newtonsoft.Json.JsonProperty("freq", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Freq { get; set; }
    
        [Newtonsoft.Json.JsonProperty("speed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Speed { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class State 
    {
        /// <summary>Current moves in UCI format</summary>
        [Newtonsoft.Json.JsonProperty("moves", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Moves { get; set; }
    
        /// <summary>Integer of milliseconds White has left on the clock</summary>
        [Newtonsoft.Json.JsonProperty("wtime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Wtime { get; set; }
    
        /// <summary>Integer of milliseconds Black has left on the clock</summary>
        [Newtonsoft.Json.JsonProperty("btime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Btime { get; set; }
    
        /// <summary>Integer of White Fisher increment.</summary>
        [Newtonsoft.Json.JsonProperty("winc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Winc { get; set; }
    
        /// <summary>Integer of Black Fisher increment.</summary>
        [Newtonsoft.Json.JsonProperty("binc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Binc { get; set; }
    
        /// <summary>Game status code. https://github.com/ornicar/scalachess/blob/0a7d6f2c63b1ca06cd3c958ed3264e738af5c5f6/src/main/scala/Status.scala#L16-L28</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Color of the winner, if any</summary>
        [Newtonsoft.Json.JsonProperty("winner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Winner { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Body2Variant
    {
        [System.Runtime.Serialization.EnumMember(Value = @"standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"chess960")]
        Chess960 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"crazyhouse")]
        Crazyhouse = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"antichess")]
        Antichess = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"atomic")]
        Atomic = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"horde")]
        Horde = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kingOfTheHill")]
        KingOfTheHill = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"racingKings")]
        RacingKings = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"threeCheck")]
        ThreeCheck = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Body3Variant
    {
        [System.Runtime.Serialization.EnumMember(Value = @"standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"chess960")]
        Chess960 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"crazyhouse")]
        Crazyhouse = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"antichess")]
        Antichess = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"atomic")]
        Atomic = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"horde")]
        Horde = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kingOfTheHill")]
        KingOfTheHill = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"racingKings")]
        RacingKings = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"threeCheck")]
        ThreeCheck = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Body8Variant
    {
        [System.Runtime.Serialization.EnumMember(Value = @"standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"chess960")]
        Chess960 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"crazyhouse")]
        Crazyhouse = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"antichess")]
        Antichess = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"atomic")]
        Atomic = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"horde")]
        Horde = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kingOfTheHill")]
        KingOfTheHill = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"racingKings")]
        RacingKings = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"threeCheck")]
        ThreeCheck = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Body8Color
    {
        [System.Runtime.Serialization.EnumMember(Value = @"random")]
        Random = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"white")]
        White = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"black")]
        Black = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Body9Room
    {
        [System.Runtime.Serialization.EnumMember(Value = @"player")]
        Player = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"spectator")]
        Spectator = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Body10Room
    {
        [System.Runtime.Serialization.EnumMember(Value = @"player")]
        Player = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"spectator")]
        Spectator = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Body11Color
    {
        [System.Runtime.Serialization.EnumMember(Value = @"random")]
        Random = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"white")]
        White = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"black")]
        Black = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Body11Variant
    {
        [System.Runtime.Serialization.EnumMember(Value = @"standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"chess960")]
        Chess960 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"crazyhouse")]
        Crazyhouse = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"antichess")]
        Antichess = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"atomic")]
        Atomic = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"horde")]
        Horde = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kingOfTheHill")]
        KingOfTheHill = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"racingKings")]
        RacingKings = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"threeCheck")]
        ThreeCheck = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Body12Reason
    {
        [System.Runtime.Serialization.EnumMember(Value = @"generic")]
        Generic = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"later")]
        Later = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tooFast")]
        TooFast = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tooSlow")]
        TooSlow = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"timeControl")]
        TimeControl = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rated")]
        Rated = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"casual")]
        Casual = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"standard")]
        Standard = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"variant")]
        Variant = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"noBot")]
        NoBot = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"onlyBot")]
        OnlyBot = 10,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Body13Color
    {
        [System.Runtime.Serialization.EnumMember(Value = @"random")]
        Random = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"white")]
        White = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"black")]
        Black = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Body13Variant
    {
        [System.Runtime.Serialization.EnumMember(Value = @"standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"chess960")]
        Chess960 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"crazyhouse")]
        Crazyhouse = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"antichess")]
        Antichess = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"atomic")]
        Atomic = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"horde")]
        Horde = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kingOfTheHill")]
        KingOfTheHill = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"racingKings")]
        RacingKings = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"threeCheck")]
        ThreeCheck = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Body14Variant
    {
        [System.Runtime.Serialization.EnumMember(Value = @"standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"chess960")]
        Chess960 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"crazyhouse")]
        Crazyhouse = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"antichess")]
        Antichess = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"atomic")]
        Atomic = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"horde")]
        Horde = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kingOfTheHill")]
        KingOfTheHill = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"racingKings")]
        RacingKings = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"threeCheck")]
        ThreeCheck = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Body15Color
    {
        [System.Runtime.Serialization.EnumMember(Value = @"random")]
        Random = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"white")]
        White = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"black")]
        Black = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Body15Variant
    {
        [System.Runtime.Serialization.EnumMember(Value = @"standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"chess960")]
        Chess960 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"crazyhouse")]
        Crazyhouse = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"antichess")]
        Antichess = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"atomic")]
        Atomic = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"horde")]
        Horde = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"kingOfTheHill")]
        KingOfTheHill = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"racingKings")]
        RacingKings = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"threeCheck")]
        ThreeCheck = 8,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.1.0 (NJsonSchema v10.3.3.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode; 
            Headers = headers; 
            Stream = stream; 
            _client = client; 
            _response = response;
        }

        public void Dispose() 
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.1.0 (NJsonSchema v10.3.3.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }
        
        public ApiResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers) 
        {
            StatusCode = statusCode; 
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.1.0 (NJsonSchema v10.3.3.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiResponse<TResult> : ApiResponse
    {
        public TResult Result { get; private set; }
        
        public ApiResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result) 
            : base(statusCode, headers)
        {
            Result = result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.1.0 (NJsonSchema v10.3.3.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.1.0 (NJsonSchema v10.3.3.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108